# description: Modernization and code generation prompt
# category: generation
# variables: legacy_code, target_framework, component_name, requirements

## Code Generation Instructions

**Legacy Code**: {{legacy_code}}
**Target Framework**: {{target_framework}}
**Component Name**: {{component_name}}
**Requirements**: {{requirements}}

### Modernization Goals

1. **Preserve Functionality**: Maintain all original functionality
2. **Modern Architecture**: Use current best practices and patterns
3. **Performance**: Optimize for better performance
4. **Accessibility**: Ensure accessibility compliance
5. **Maintainability**: Create clean, well-documented code

### {{target_framework}} Implementation Guidelines

**React Components**:
- Use functional components with hooks
- Implement proper state management
- Use TypeScript for type safety
- Follow React best practices

**Next.js Pages**:
- Implement server-side rendering where appropriate
- Use Next.js routing and data fetching
- Optimize for performance and SEO
- Follow Next.js conventions

**Astro Components**:
- Separate frontmatter from template
- Use static generation where possible
- Implement responsive design
- Optimize for performance

### Code Quality Standards

- [ ] Clean, readable code structure
- [ ] Proper error handling
- [ ] Comprehensive documentation
- [ ] Accessibility features
- [ ] Responsive design
- [ ] Performance optimizations
- [ ] Type safety (where applicable)
- [ ] Modern JavaScript/TypeScript features

### Output Requirements

Generate a complete, production-ready {{target_framework}} component that:
1. Implements all original functionality
2. Uses modern best practices
3. Is well-documented and maintainable
4. Follows the specified framework conventions
5. Includes proper error handling
6. Is accessible and responsive

Begin the code generation process. 