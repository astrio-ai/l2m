# Generated Python code from COBOL

# Variable declarations
counter = 0
loop_var = ''
more_data = ''

def para_100_main():
    global counter, loop_var, more_data
    
    counter = 0
    loop_var = 'LOOP'
    while not (more_data == 'NO'):
        print('COUNTER IS ' + ' ' + str(counter))
        .

  += para_1
        .

  += counter
        .

  += if
        .

  += counter
        .

  += >
        .

  += para_5
        .

  += then
        .

  += move
        .

  += 'no'
        .

  += more_data
        .

  += end_if
        .

  += end_perform
        .

  += perform
        .

  += a000_count
        .

  += para_3
        .

  += times
        .

  += goback
    
    def a000_count():
        global counter, loop_var, more_data
        
        print('COUNTING...')
        counter += para_1
    
# AI-Generated Code Snippets
# =========================
# These snippets were generated by AI to handle complex COBOL constructs

# edge_case_0_unknown_tokens
# Generated by AI for complex COBOL construct
```
counter = 0
loop_var = ''
while True:
    display('Please enter a string: ')
    input_str = input()
    if len(input_str) > 10:
        display('String is too long.')
    else:
        loop_var = input_str
        counter += 1
        display(f'You entered {loop_var}')
    if counter > 3:
        break
```

# edge_case_1_unknown_tokens
# Generated by AI for complex COBOL construct
# root.child[0] context
counter = 0
loop_var = ''
while True:
    # Perform-Test
    print("Perform-Test")
    # Data Division
    data_division = 'WORKING-STORAGE'
    # Working-Storage Section
    working_storage_section = '01 COUNTER PIC 9 (3)'
    # Loop-Variable
    loop_var = input("Enter a value: ")
    # Counter
    counter = int(loop_var)
    if counter > 0:
        # Perform until counter is greater than zero
        while counter > 0:
            print(f"Counter: {counter}")
            counter -= 1
    else:
        break

# edge_case_2_unknown_tokens
# Generated by AI for complex COBOL construct
```
# Perform a loop until the counter is greater than 0
counter = 10
while counter > 0:
    # Print a message
    print("Hello World!")
    # Decrement the counter
    counter -= 1
```

# edge_case_3_unknown_tokens
# Generated by AI for complex COBOL construct
```
counter = 0
loop_var = 'X' * 10
more_data = 'X' * 3
while counter < len(more_data):
    print(f"{counter + 1}: {more_data[counter]}")
    counter += 1
```

# edge_case_4_unknown_tokens
# Generated by AI for complex COBOL construct
```
counter = 0
loop_var = ''
more_data = False
while True:
    display('Enter a value for more data (Y/N): ')
    user_input = input()
    if user_input.lower() == 'y':
        more_data = True
        break
    elif user_input.lower() == 'n':
        more_data = False
        break
    else:
        print('Invalid input')
if more_data:
    loop_var = input('Enter a value for loop variable: ')
    counter += 1
else:
    counter = 0
print(f'Loop variable: {loop_var}')
print(f'Counter: {counter}')
```

# edge_case_5_unknown_tokens
# Generated by AI for complex COBOL construct
```
counter = 0
loop_var = "YES"
more_data = "NO"
while True:
    if more_data == "YES":
        print("More data available")
        counter += 1
        loop_var = input("Enter more data (yes/no): ")
        if loop_var.lower() == "yes":
            more_data = "YES"
        else:
            more_data = "NO"
    else:
        break
print(f"Counter: {counter}")
```


# ========================
# AI-Generated Code Snippets

    def main():
        para_100_main()
    
    if __name__ == '__main__':
        main()